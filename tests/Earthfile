VERSION 0.8
ARG --global debian = bookworm

# save-all-test-containers saves all Docker container test images
save-all-test-containers:
    BUILD ./client+save-container --debian=$debian
    BUILD ./server+save-container --debian=$debian
    BUILD ./base+save-test-nginx-container
    BUILD ./base+save-test-iperf-container --debian=$debian

TEST:
    FUNCTION
    FROM ./e2e+build-container

    ARG CLIENT_TOKIO_WORKER_THREADS
    ARG SERVER_TOKIO_WORKER_THREADS

    ARG MODE
    ARG SERVER_PORT
    ARG SERVER_EXTRA_ARGS=""
    ARG CLIENT_EXTRA_ARGS=""
    ARG CLIENT_CONFIG_FILE="client_config.yaml"
    ARG COMPOSE_FILE="./docker-compose.yml"
    ARG TEST_SCRIPT=./run-simple-test.sh

    ARG KYBER_CLIENT

    ARG SERVER_ARGS="--config-file server_config.yaml --log-level trace ${SERVER_EXTRA_ARGS} --bind-address 0.0.0.0:${SERVER_PORT}"
    ARG CLIENT_ARGS="--config-file ${CLIENT_CONFIG_FILE} --log-level trace ${CLIENT_EXTRA_ARGS} --server server:${SERVER_PORT}"

    LET SERVER_ARGS=$SERVER_ARGS
    LET CLIENT_ARGS=$CLIENT_ARGS
    IF [ -n "$MODE" ]
        SET SERVER_ARGS="$SERVER_ARGS --mode=$MODE"
        SET CLIENT_ARGS="$CLIENT_ARGS --mode=$MODE"
    END

    LET CLIENT_IMAGE_CMD="./client+build-container --TOKIO_WORKER_THREADS=$CLIENT_TOKIO_WORKER_THREADS --debian=$debian"
    IF [ "$KYBER_CLIENT" = "true" ]
        SET CLIENT_IMAGE_CMD="$CLIENT_IMAGE_CMD --KYBER_CLIENT=true"
    END
    ARG CLIENT_IMAGE="($CLIENT_IMAGE_CMD)"
    ARG SERVER_IMAGE="(./server+build-container --TOKIO_WORKER_THREADS=$SERVER_TOKIO_WORKER_THREADS --debian=$debian)"
    ARG NGINX_IMAGE="./base+build-test-nginx-container"
    ARG IPERF_IMAGE="(./base+build-test-iperf-container --debian=$debian)"

    WITH DOCKER \
        --load lightway-test-client:latest=$CLIENT_IMAGE \
        --load lightway-test-server:latest=$SERVER_IMAGE \
        --load lightway-test-nginx:latest=$NGINX_IMAGE \
        --load lightway-test-iperf:latest=$IPERF_IMAGE
        RUN --no-cache ./run-with-compose-stack.sh $COMPOSE_FILE $TEST_SCRIPT
    END

# run-tcp-aes256-test runs e2e test using TCP and AES256 cipher
run-tcp-aes256-test:
    DO +TEST --MODE=tcp --SERVER_PORT=443 --CLIENT_EXTRA_ARGS="--cipher aes256"

# run-tcp-chacha20-test runs e2e test using TCP and chacha20 cipher
run-tcp-chacha20-test:
    DO +TEST --MODE=tcp --SERVER_PORT=443 --CLIENT_EXTRA_ARGS="--cipher chacha20"

# run-tcp-pqc-test runs e2e test using TCP and default cipher with PQC enabled
run-tcp-pqc-test:
    DO +TEST --MODE=tcp --SERVER_PORT=443 --SERVER_EXTRA_ARGS="--enable-pqc" --CLIENT_EXTRA_ARGS="--enable-pqc"

# run-tcp-pqc-kyber-test runs e2e test using TCP and P521 Kyber Level 5 KEM enabled
run-tcp-pqc-kyber-test:
    DO +TEST --MODE=tcp --SERVER_PORT=443 --SERVER_EXTRA_ARGS="--enable-pqc" --CLIENT_EXTRA_ARGS="--enable-pqc" --KYBER_CLIENT=true

# run-udp-aes256-test runs e2e test using UDP and AES256 cipher
run-udp-aes256-test:
    DO +TEST --MODE=udp --SERVER_PORT=27690 --CLIENT_EXTRA_ARGS=""

# run-udp-chacha20-test runs e2e test using UDP and chacha20 cipher
run-udp-chacha20-test:
    DO +TEST --MODE=udp --SERVER_PORT=27690 --CLIENT_EXTRA_ARGS="--cipher chacha20"

# run-udp-pqc-test runs e2e test using UDP and default cipher with PQC enabled
run-udp-pqc-test:
    DO +TEST --MODE=udp --SERVER_PORT=27690 --SERVER_EXTRA_ARGS="--enable-pqc" --CLIENT_EXTRA_ARGS="--enable-pqc"

# run-udp-pqc-kyber-test runs e2e test using UDP and P521 Kyber Level 5 KEM enabled
run-udp-pqc-kyber-test:
    DO +TEST --MODE=udp --SERVER_PORT=27690 --SERVER_EXTRA_ARGS="--enable-pqc" --CLIENT_EXTRA_ARGS="--enable-pqc" --KYBER_CLIENT=true

# run-udp-floating-ip-test runs e2e test of UDP floating IP support
run-udp-floating-ip-test:
    DO +TEST --MODE=udp --SERVER_PORT=27690 --CLIENT_EXTRA_ARGS="" --TEST_SCRIPT=./run-udp-floating-test.sh

# run-udp-pmtud-test runs e2e test of UDP with PMTUD enabled
run-udp-pmtud-test:
    DO +TEST --MODE=udp --SERVER_PORT=27690 --CLIENT_EXTRA_ARGS="--enable-pmtud"

# run-udp-iouring-test runs e2e test using UDP and default cipher with io-uring enabled
run-udp-iouring-test:
    DO +TEST --MODE=udp --SERVER_PORT=27690 --SERVER_EXTRA_ARGS="--enable-tun-iouring" --CLIENT_EXTRA_ARGS="--enable-tun-iouring"

# run-tcp-iouring-test runs e2e test using TCP and default cipher with io-uring enabled
run-tcp-iouring-test:
    DO +TEST --MODE=tcp --SERVER_PORT=27690 --SERVER_EXTRA_ARGS="--enable-tun-iouring" --CLIENT_EXTRA_ARGS="--enable-tun-iouring"

# run-udp-keepalive-test runs e2e test of UDP with client using keepalive
run-udp-keepalive-test:
    DO +TEST --MODE=udp --SERVER_PORT=27690 --CLIENT_EXTRA_ARGS="--keepalive-interval=2s --keepalive-timeout=6s"

# run-tcp-keepalive-test runs e2e test of TCP with client using keepalive
run-tcp-keepalive-test:
    DO +TEST --MODE=tcp --SERVER_PORT=443 --CLIENT_EXTRA_ARGS="--keepalive-interval=2s --keepalive-timeout=6s"

# run-udp-single-threaded-test runs e2e test of UDP with server and client using a single Tokio worker thread
run-udp-single-threaded-test:
    DO +TEST --MODE=udp --SERVER_PORT=27690 --SERVER_TOKIO_WORKER_THREADS=1 --SERVER_EXTRA_ARGS="--enable-tun-iouring" --CLIENT_TOKIO_WORKER_THREADS=1 --CLIENT_EXTRA_ARGS="--keepalive-interval=2s --keepalive-timeout=6s --enable-tun-iouring --enable-pmtud"

# run-tcp-single-threaded-test runs e2e test of TCP with server and client using a single Tokio worker thread
run-tcp-single-threaded-test:
    DO +TEST --MODE=tcp --SERVER_PORT=443 --SERVER_TOKIO_WORKER_THREADS=1 --CLIENT_TOKIO_WORKER_THREADS=1 --CLIENT_EXTRA_ARGS="--keepalive-interval=2s --keepalive-timeout=6s --enable-pmtud"

# run-tcp-parallel-connect-test runs e2e test of client connecting to multiple wrong servers and one TCP server
run-tcp-parallel-connect-test:
    DO +TEST --MODE=tcp --SERVER_PORT=27690 --CLIENT_CONFIG_FILE="parallel_connect/client_config.tcp.yaml" --TEST_SCRIPT="./run-simple-test.sh server_tcp"

# run-udp-parallel-connect-test runs e2e test of client connecting to multiple wrong servers and one UDP server
run-udp-parallel-connect-test:
    DO +TEST --MODE=udp --SERVER_PORT=27690 --CLIENT_CONFIG_FILE="parallel_connect/client_config.udp.yaml" --TEST_SCRIPT="./run-simple-test.sh server_udp"

# run-tcp-then-udp-parallel-connect-test runs e2e test of client connecting to a TCP and UDP server, with the TCP server as priority
run-tcp-then-udp-parallel-connect-test:
    DO +TEST --SERVER_PORT=27690 --CLIENT_CONFIG_FILE="parallel_connect/client_config.tcp_then_udp.yaml" --COMPOSE_FILE="docker-compose.parallel_connect.yml" --TEST_SCRIPT="./run-parallel-connect-test.sh server_tcp"

# run-udp-then-tcp-parallel-connect-test runs e2e test of client connecting to a UDP and TCP server, with the UDP server as priority
run-udp-then-tcp-parallel-connect-test:
    DO +TEST --SERVER_PORT=27690 --CLIENT_CONFIG_FILE="parallel_connect/client_config.udp_then_tcp.yaml" --COMPOSE_FILE="docker-compose.parallel_connect.yml" --TEST_SCRIPT="./run-parallel-connect-test.sh server_udp"

# run-token-auth-test runs a test of the token auth
run-token-auth-test:
    DO +TEST --MODE=udp --SERVER_PORT=27690 --CLIENT_EXTRA_ARGS="--token eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjQ4ODMxMTM0MTZ9.gb0U7xTwxl7GDeKftKSZvnkkIDnoz8NmzJ4etukCjtZWzA4kSNbt84iTKOE14paRZdfE67tLGfcLsqA9uh-zuA_-ecZbiC4znz2CVVjhD2CIrW_0LQbHRbzYlOozjc108pct-VivtiPr7SqcIgRTjH59HTCDXtgp0kELhhr3NNfYP0-6DtadXQ_Twn2tcC3A-rTpfjwo7HDqnc43niCALXFhqR0F4DkEC3amKuOiP9afQ6dFmWVAzWXWEpQ_kK-EsCeBZ6K89GaF5quIErrV3U_FSwbX8biFB7S8VhkLqCoyabRKKprwp_mi24e91URgGqNvbCrXs2zrJMat-1zUvw" --SERVER_EXTRA_ARGS="--token-rsa-pub-key-pem /token.pub"

# run-all-tests runs all tests
run-all-tests:
    BUILD +run-tcp-aes256-test
    BUILD +run-tcp-chacha20-test
    BUILD +run-tcp-pqc-test
    BUILD +run-tcp-pqc-kyber-test
    BUILD +run-udp-aes256-test
    BUILD +run-udp-chacha20-test
    BUILD +run-udp-pqc-test
    BUILD +run-udp-pqc-kyber-test
    BUILD +run-udp-floating-ip-test
    BUILD +run-udp-pmtud-test
    BUILD +run-udp-iouring-test
    BUILD +run-tcp-iouring-test
    BUILD +run-udp-keepalive-test
    BUILD +run-tcp-keepalive-test
    BUILD +run-udp-single-threaded-test
    BUILD +run-tcp-single-threaded-test
    BUILD +run-tcp-parallel-connect-test
    BUILD +run-udp-parallel-connect-test
    BUILD +run-tcp-then-udp-parallel-connect-test
    BUILD +run-udp-then-tcp-parallel-connect-test
